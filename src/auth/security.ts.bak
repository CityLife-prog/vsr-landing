/**
 * Security Service Implementation
 * Handles security events, rate limiting, and account locking
 */

import * as crypto from 'crypto';
import {
  SecurityService,
  SecurityEvent,
  SecurityEventType,
  SecuritySeverity,
  RateLimitConfig,
  SecurityConfig,
  AuthErrorCode,
  SecurityError
} from './types';

// Rate limit entry
interface RateLimitEntry {
  count: number;
  windowStart: number;
  lastAccess: number;
}

// Account lock entry
interface AccountLockEntry {
  userId: string;
  lockedAt: Date;
  reason: string;
  expiresAt?: Date;
}

export class SecurityServiceImpl /* implements SecurityService */ {
  private config: SecurityConfig;
  private rateLimits = new Map<string, RateLimitEntry>();
  private accountLocks = new Map<string, AccountLockEntry>();
  private securityEvents: SecurityEvent[] = [];
  private cleanupInterval?: NodeJS.Timeout;

  constructor(config: SecurityConfig) {
    this.config = {
      maxSecurityEvents: 10000,
      eventRetentionHours: 24,
      defaultRateLimit: {
        enabled: true,
        windowMs: 60000, // 1 minute
        maxRequests: 100,
        skipSuccessfulRequests: false,
        skipFailedRequests: false
      },
      accountLockout: {
        enabled: true,
        maxAttempts: 5,
        lockoutDuration: 900000, // 15 minutes
        progressiveDelay: true
      },
      bruteForceProtection: {
        enabled: true,
        windowMs: 300000, // 5 minutes
        maxAttempts: 10,
        lockoutDuration: 1800000 // 30 minutes
      },
      ...config
    };

    // Start cleanup interval
    this.startCleanupInterval();
  }

  /**
   * Log security event
   */
  async logEvent(event: SecurityEvent): Promise<void> {
    // Add timestamp if not present
    if (!event.timestamp) {
      event.timestamp = new Date();
    }

    // Add event ID
    const eventWithId = {
      ...event,
      id: this.generateEventId(),
      metadata: {
        userAgent: event.userAgent,
        ip: event.ip,
        ...event.metadata
      }
    };

    this.securityEvents.push(eventWithId);

    // Trim events if we exceed max
    if (this.securityEvents.length > this.config.maxSecurityEvents) {
      this.securityEvents = this.securityEvents.slice(-this.config.maxSecurityEvents);
    }

    // Handle specific event types
    await this.handleSecurityEvent(eventWithId);

    // Log to console for debugging (in production, this would go to a logging service)
    this.logToConsole(eventWithId);
  }

  /**
   * Check if request is rate limited
   */
  async isRateLimited(key: string, config?: RateLimitConfig): Promise<boolean> {
    const rateLimitConfig = { ...this.config.defaultRateLimit, ...config };
    
    if (!rateLimitConfig.enabled) {
      return false;
    }

    const now = Date.now();
    const entry = this.rateLimits.get(key);

    if (!entry) {
      return false;
    }

    // Check if window has expired
    if (now - entry.windowStart > rateLimitConfig.windowMs) {
      this.rateLimits.delete(key);
      return false;
    }

    return entry.count >= rateLimitConfig.maxRequests;
  }

  /**
   * Increment rate limit counter
   */
  async incrementRateLimit(key: string, config?: RateLimitConfig): Promise<number> {
    const rateLimitConfig = { ...this.config.defaultRateLimit, ...config };
    
    if (!rateLimitConfig.enabled) {
      return 0;
    }

    const now = Date.now();
    const entry = this.rateLimits.get(key);

    if (!entry || (now - entry.windowStart) > rateLimitConfig.windowMs) {
      // Create new window
      const newEntry: RateLimitEntry = {
        count: 1,
        windowStart: now,
        lastAccess: now
      };
      this.rateLimits.set(key, newEntry);
      return 1;
    } else {
      // Increment existing window
      entry.count++;
      entry.lastAccess = now;
      return entry.count;
    }
  }

  /**
   * Check if account is locked
   */
  async isAccountLocked(userId: string): Promise<boolean> {
    if (!this.config.accountLockout.enabled) {
      return false;
    }

    const lockEntry = this.accountLocks.get(userId);
    if (!lockEntry) {
      return false;
    }

    // Check if lock has expired
    if (lockEntry.expiresAt && lockEntry.expiresAt < new Date()) {
      this.accountLocks.delete(userId);
      return false;
    }

    return true;
  }

  /**
   * Lock account
   */
  async lockAccount(userId: string, reason: string, duration?: number): Promise<void> {
    if (!this.config.accountLockout.enabled) {
      return;
    }

    const lockDuration = duration || this.config.accountLockout.lockoutDuration;
    const expiresAt = new Date(Date.now() + lockDuration);

    const lockEntry: AccountLockEntry = {
      userId,
      lockedAt: new Date(),
      reason,
      expiresAt
    };

    this.accountLocks.set(userId, lockEntry);

    // Log the account lock event
    await this.logEvent({
      type: SecurityEventType.ACCOUNT_LOCKED,
      userId,
      timestamp: new Date(),
      details: { reason, duration: lockDuration },
      severity: SecuritySeverity.HIGH
    });
  }

  /**
   * Unlock account
   */
  async unlockAccount(userId: string): Promise<void> {
    const lockEntry = this.accountLocks.get(userId);
    if (lockEntry) {
      this.accountLocks.delete(userId);

      // Log the account unlock event
      await this.logEvent({
        type: SecurityEventType.ACCOUNT_UNLOCKED,
        userId,
        timestamp: new Date(),
        details: { previousLockReason: lockEntry.reason },
        severity: SecuritySeverity.MEDIUM
      });
    }
  }

  /**
   * Get security events for user
   */
  async getSecurityEvents(userId: string, limit: number = 100): Promise<SecurityEvent[]> {
    return this.securityEvents
      .filter(event => event.userId === userId)
      .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())
      .slice(0, limit);
  }

  /**
   * Get security events by type
   */
  async getSecurityEventsByType(eventType: SecurityEventType, limit: number = 100): Promise<SecurityEvent[]> {
    return this.securityEvents
      .filter(event => event.type === eventType)
      .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())
      .slice(0, limit);
  }

  /**
   * Get security dashboard data
   */
  async getSecurityDashboard(): Promise<{
    totalEvents: number;
    eventsByType: Record<SecurityEventType, number>;
    eventsBySeverity: Record<SecuritySeverity, number>;
    recentEvents: SecurityEvent[];
    lockedAccounts: number;
    activeRateLimits: number;
  }> {
    const eventsByType = {} as Record<SecurityEventType, number>;
    const eventsBySeverity = {} as Record<SecuritySeverity, number>;

    // Initialize counters
    Object.values(SecurityEventType).forEach(type => {
      eventsByType[type as SecurityEventType] = 0;
    });
    
    Object.values(SecuritySeverity).forEach(severity => {
      eventsBySeverity[severity as SecuritySeverity] = 0;
    });

    // Count events
    this.securityEvents.forEach(event => {
      eventsByType[event.type]++;
      eventsBySeverity[event.severity]++;
    });

    return {
      totalEvents: this.securityEvents.length,
      eventsByType,
      eventsBySeverity,
      recentEvents: this.securityEvents
        .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())
        .slice(0, 20),
      lockedAccounts: this.accountLocks.size,
      activeRateLimits: this.rateLimits.size
    };
  }

  /**
   * Clear expired rate limits and locks
   */
  cleanup(): void {
    const now = Date.now();

    // Clean up expired rate limits
    for (const [key, entry] of this.rateLimits.entries()) {
      if (now - entry.windowStart > this.config.defaultRateLimit.windowMs * 2) {
        this.rateLimits.delete(key);
      }
    }

    // Clean up expired account locks
    for (const [userId, lockEntry] of this.accountLocks.entries()) {
      if (lockEntry.expiresAt && lockEntry.expiresAt < new Date()) {
        this.accountLocks.delete(userId);
      }
    }

    // Clean up old security events
    const cutoff = new Date(Date.now() - this.config.eventRetentionHours * 60 * 60 * 1000);
    this.securityEvents = this.securityEvents.filter(event => event.timestamp > cutoff);
  }

  /**
   * Handle specific security events
   */
  private async handleSecurityEvent(event: SecurityEvent): Promise<void> {
    switch (event.type) {
      case SecurityEventType.LOGIN_FAILURE:
        await this.handleLoginFailure(event);
        break;
      
      case SecurityEventType.BRUTE_FORCE_DETECTED:
        await this.handleBruteForceDetection(event);
        break;
      
      case SecurityEventType.SUSPICIOUS_ACTIVITY:
        await this.handleSuspiciousActivity(event);
        break;
      
      default:
        // No special handling needed
        break;
    }
  }

  /**
   * Handle login failure events
   */
  private async handleLoginFailure(event: SecurityEvent): Promise<void> {
    if (!event.userId) return;

    const failureKey = `login_failures:${event.userId}`;
    const attempts = await this.incrementRateLimit(failureKey, {
      enabled: true,
      windowMs: this.config.bruteForceProtection.windowMs,
      maxRequests: this.config.bruteForceProtection.maxAttempts,
      skipSuccessfulRequests: false,
      skipFailedRequests: false
    });

    if (attempts >= this.config.bruteForceProtection.maxAttempts) {
      await this.lockAccount(
        event.userId,
        'Too many failed login attempts',
        this.config.bruteForceProtection.lockoutDuration
      );

      await this.logEvent({
        type: SecurityEventType.BRUTE_FORCE_DETECTED,
        userId: event.userId,
        ip: event.ip,
        userAgent: event.userAgent,
        timestamp: new Date(),
        details: { attempts, trigger: 'login_failures' },
        severity: SecuritySeverity.HIGH
      });
    }
  }

  /**
   * Handle brute force detection
   */
  private async handleBruteForceDetection(event: SecurityEvent): Promise<void> {
    // This could trigger additional security measures like:
    // - IP blocking
    // - Notification to security team
    // - Enhanced monitoring
    console.warn('Brute force attack detected:', event);
  }

  /**
   * Handle suspicious activity
   */
  private async handleSuspiciousActivity(event: SecurityEvent): Promise<void> {
    // This could trigger additional security measures like:
    // - Account flagging
    // - Enhanced monitoring
    // - Security team notification
    console.warn('Suspicious activity detected:', event);
  }

  /**
   * Generate unique event ID
   */
  private generateEventId(): string {
    return `sec_${Date.now()}_${crypto.randomBytes(8).toString('hex')}`;
  }

  /**
   * Log event to console (in production, this would use a proper logging service)
   */
  private logToConsole(event: SecurityEvent): void {
    const logLevel = this.getLogLevel(event.severity);
    const message = `[SECURITY] ${event.type}: ${event.details?.error || event.details?.reason || 'Event logged'}`;
    
    console[logLevel]({
      timestamp: event.timestamp.toISOString(),
      type: event.type,
      severity: event.severity,
      userId: event.userId,
      sessionId: event.sessionId,
      ip: event.ip,
      userAgent: event.userAgent,
      details: event.details,
      message
    });
  }

  /**
   * Get console log level based on severity
   */
  private getLogLevel(severity: SecuritySeverity): 'log' | 'warn' | 'error' {
    switch (severity) {
      case SecuritySeverity.LOW:
        return 'log';
      case SecuritySeverity.MEDIUM:
        return 'warn';
      case SecuritySeverity.HIGH:
      case SecuritySeverity.CRITICAL:
        return 'error';
      default:
        return 'log';
    }
  }

  /**
   * Start cleanup interval
   */
  private startCleanupInterval(): void {
    // Run cleanup every 5 minutes
    this.cleanupInterval = setInterval(() => {
      this.cleanup();
    }, 5 * 60 * 1000);
  }

  /**
   * Stop cleanup interval
   */
  stopCleanupInterval(): void {
    if (this.cleanupInterval) {
      clearInterval(this.cleanupInterval);
      this.cleanupInterval = undefined;
    }
  }

  /**
   * Destroy the service and clean up resources
   */
  destroy(): void {
    this.stopCleanupInterval();
    this.rateLimits.clear();
    this.accountLocks.clear();
    this.securityEvents.length = 0;
  }
}

// Security utilities
export class SecurityUtils {
  /**
   * Generate secure random string
   */
  static generateSecureRandom(length: number = 32): string {
    return crypto.randomBytes(length).toString('hex');
  }

  /**
   * Generate CSRF token
   */
  static generateCSRFToken(): string {
    return this.generateSecureRandom(32);
  }

  /**
   * Hash IP address for privacy
   */
  static hashIP(ip: string, salt: string = ''): string {
    const hash = crypto.createHash('sha256');
    hash.update(ip + salt);
    return hash.digest('hex').substring(0, 16);
  }

  /**
   * Check if IP is in private range
   */
  static isPrivateIP(ip: string): boolean {
    const privateRanges = [
      /^10\./,
      /^172\.(1[6-9]|2[0-9]|3[0-1])\./,
      /^192\.168\./,
      /^127\./,
      /^::1$/,
      /^fc[0-9a-f]{2}:/i,
      /^fe[8-9a-b][0-9a-f]:/i
    ];

    return privateRanges.some(range => range.test(ip));
  }

  /**
   * Sanitize user agent string
   */
  static sanitizeUserAgent(userAgent: string): string {
    return userAgent
      .replace(/[<>]/g, '') // Remove potential HTML
      .substring(0, 200); // Limit length
  }

  /**
   * Calculate risk score based on security events
   */
  static calculateRiskScore(events: SecurityEvent[]): number {
    const weights = {
      [SecuritySeverity.LOW]: 1,
      [SecuritySeverity.MEDIUM]: 3,
      [SecuritySeverity.HIGH]: 7,
      [SecuritySeverity.CRITICAL]: 15
    };

    const recentEvents = events.filter(event => 
      Date.now() - event.timestamp.getTime() < 24 * 60 * 60 * 1000 // Last 24 hours
    );

    const score = recentEvents.reduce((total, event) => {
      return total + (weights[event.severity] || 1);
    }, 0);

    // Normalize to 0-100 scale
    return Math.min(100, score);
  }

  /**
   * Check if event pattern indicates attack
   */
  static detectAttackPattern(events: SecurityEvent[]): {
    isAttack: boolean;
    confidence: number;
    pattern: string;
  } {
    // Simple pattern detection - in production, this would be more sophisticated
    const recentEvents = events.filter(event => 
      Date.now() - event.timestamp.getTime() < 5 * 60 * 1000 // Last 5 minutes
    );

    const failureEvents = recentEvents.filter(event => 
      event.type === SecurityEventType.LOGIN_FAILURE
    );

    // Brute force pattern
    if (failureEvents.length >= 5) {
      return {
        isAttack: true,
        confidence: Math.min(100, failureEvents.length * 20),
        pattern: 'brute_force'
      };
    }

    // Rate limit pattern
    const rateLimitEvents = recentEvents.filter(event => 
      event.type === SecurityEventType.RATE_LIMIT_EXCEEDED
    );

    if (rateLimitEvents.length >= 3) {
      return {
        isAttack: true,
        confidence: Math.min(100, rateLimitEvents.length * 30),
        pattern: 'rate_limit_abuse'
      };
    }

    return {
      isAttack: false,
      confidence: 0,
      pattern: 'normal'
    };
  }
}

// Default security configuration
export const DEFAULT_SECURITY_CONFIG: SecurityConfig = {
  maxSecurityEvents: 10000,
  eventRetentionHours: 24,
  defaultRateLimit: {
    enabled: true,
    windowMs: 60000, // 1 minute
    maxRequests: 100,
    skipSuccessfulRequests: false,
    skipFailedRequests: false
  },
  accountLockout: {
    enabled: true,
    maxAttempts: 5,
    lockoutDuration: 900000, // 15 minutes
    progressiveDelay: true
  },
  bruteForceProtection: {
    enabled: true,
    windowMs: 300000, // 5 minutes
    maxAttempts: 10,
    lockoutDuration: 1800000 // 30 minutes
  }
};